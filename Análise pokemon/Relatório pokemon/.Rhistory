summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n()) |>
arrange(desc(peso_media))
#| error: false
#| message: false
#| warning: false
#| include: false
pacotes = c("tidyverse","C50","gmodels","dplyr","knitr")
# Verifica se cada pacote está instalado e instala caso contrário
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados)
}
lapply(pacotes, library, character.only = TRUE)
# Carrega a base de dados em formato csv
pokemon = read.csv2("C:/Users/lipe2/Downloads/OneDrive_2025-03-27/Análise pokemon/pokemon_data.csv", header = T, sep = ",")
# Verifica as 5 primeiras linhas do data frame
head(pokemon, 5)
# Verificando o tipo de cada variável
str(pokemon)
# Verificando se há entradas duplicadas
print(paste("A quantidade de entradas duplicadas na base de dados é:", sum(duplicated(pokemon))))
# Retirando espaços em branco com trimws
pokemon = apply(pokemon,2,trimws)
pokemon = as.data.frame(pokemon)
# Verificando a presença do valor "vazio"
tabela = prop.table(table(pokemon$type2))*100
tabela_df <- as.data.frame(tabela)
# Exibindo como tabela formatada
kable(tabela_df, col.names = c("Tipo2", "Proporção"), digits = 3)
# Criando uma função para substituição do valor "vazio"
subst_vazios = function(col){
ifelse(col == "", "Nenhum", col)
}
# Aplicando a função de substituição
pokemon = apply(pokemon, 2, subst_vazios)
pokemon = as.data.frame(pokemon)
#| warning: false
# Separando coluna ev_yield em 3 colunas
pokemon = pokemon |>
separate(col = ev_yield, into = c("pts. de esforço","pts. de esforço2","pts. de esforço3"),
sep = ",")
# Criação da função de substituição
subst_na = function(col){
ifelse(is.na(col), "Nenhum", col)
}
# Aplicando a função nas colunas que possum NA
pokemon = apply(pokemon, 2, subst_na)
pokemon = as.data.frame(pokemon)
#| warning: false
attach(pokemon)
# Alterando o tipo das colunas
# Fator
pokemon$generation = as.factor(generation)
pokemon$base_friendship = as.factor(base_friendship)
pokemon$special_group = as.factor(special_group)
pokemon$egg_cycles = as.factor(egg_cycles)
pokemon$percent_male = as.factor(percent_male)
pokemon$percent_female = as.factor(percent_female)
pokemon$growth_rate = as.factor(growth_rate)
# Inteiros e Reais
pokemon$height = as.double(height)
pokemon$weight = as.double(weight)
pokemon$hp = as.integer(hp)
pokemon$attack = as.integer(attack)
pokemon$defense = as.integer(defense)
pokemon$sp_atk = as.integer(sp_atk)
pokemon$sp_def = as.integer(sp_def)
pokemon$total = as.integer(total)
pokemon$base_exp = as.integer(base_exp)
pokemon$catch_rate = as.integer(catch_rate)
pokemon$base_friendship = as.integer(base_friendship)
# Seleciona apenas as colunas numéricas
dados_numericos = pokemon |> select_if(is.numeric)
# Descrição das variáveis numéricas
summary(dados_numericos)
# Tipo1
tabela_tipo1 = pokemon |>
group_by(type1) |>
summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n())
kable(tabela_tipo1, col.names = c("Tipo Primário", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
# Tipo2
tabela_tipo2 = pokemon |>
group_by(type2) |>
summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n())
kable(tabela_tipo2, col.names = c("Tipo Secundário", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
# Tipo1
tabela_tipo1 = pokemon |>
group_by(type1) |>
summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n()) |>
arrange(desc(peso_media))
# Tipo1
tabela_tipo1 = pokemon |>
group_by(type1) |>
summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n()) |>
arrange(desc(peso_media))
kable(tabela_tipo1, col.names = c("Tipo Primário", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
# Tipo2
tabela_tipo2 = pokemon |>
group_by(type2) |>
summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n()) |>
arrange(desc(peso_media))
# Tipo2
tabela_tipo2 = pokemon |>
group_by(type2) |>
summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n()) |>
arrange(desc(peso_media))
kable(tabela_tipo2, col.names = c("Tipo Secundário", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
# 5 Pokemons mais fortes (baseado na coluna total)
pokemon |>
select(name,total,species,type1,type2,growth_rate) |>
filter(total>=mean(total)) |>
arrange(desc(total)) |>
head(5)
# 5 Pokemons mais fracos (baseado na coluna total)
pokemon |>
select(name,total,species,type1,type2, growth_rate) |>
filter(total<mean(total)) |>
arrange((total)) |>
head(5)
# Tipo2
tabela_tipo2 = pokemon |>
group_by(type2) |>
summarise(peso_media = mean(height, na.rm = T),
altura_media = mean(weight, na.rm = T),
count = n()) |>
arrange(desc(peso_media))
kable(tabela_tipo2, col.names = c("Tipo Secundário", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
#| error: false
#| message: false
#| warning: false
#| include: false
pacotes = c("tidyverse","C50","gmodels","dplyr","knitr","gtsummary","caret")
# Verifica se cada pacote está instalado e instala caso contrário
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados)
}
lapply(pacotes, library, character.only = TRUE)
#| echo: false
#| message: false
#| warning: false
# Carrega a base de dados em formato csv
pokemon = read.csv2("C:/Users/lipe2/Downloads/Análise pokemon/pokemon_data.csv", header = T, sep = ",", fileEncoding = "UTF-8")
#| echo: false
#| message: false
#| warning: false
# Carrega a base de dados em formato csv
pokemon = read.csv2("~/R/PROJETOS R/Análise pokemon/pokemon_data.csv", header = T, sep = ",", fileEncoding = "UTF-8")
# Verifica as 5 primeiras linhas do data frame
head(pokemon, 5)
#| error: false
#| message: false
#| warning: false
#| include: false
pacotes = c("tidyverse","C50","gmodels","dplyr","knitr","gtsummary","caret")
# Verifica se cada pacote está instalado e instala caso contrário
pacotes_nao_instalados <- pacotes[!(pacotes %in% installed.packages()[, "Package"])]
if (length(pacotes_nao_instalados) > 0) {
install.packages(pacotes_nao_instalados)
}
lapply(pacotes, library, character.only = TRUE)
#| echo: false
#| message: false
#| warning: false
# Carrega a base de dados em formato csv
pokemon = read.csv2("~/R/PROJETOS R/Análise pokemon/pokemon_data.csv", header = T, sep = ",", fileEncoding = "UTF-8")
# Verifica as 5 primeiras linhas do data frame
head(pokemon, 5)
#| echo: false
# Verificando o tipo de cada variável
str(pokemon)
#| echo: false
#| message: false
#| warning: false
# Verificando se há entradas duplicadas
print(paste("A quantidade de entradas duplicadas na base de dados é:", sum(duplicated(pokemon))))
# Retirando espaços em branco com trimws
pokemon = apply(pokemon,2,trimws)
pokemon = as.data.frame(pokemon)
# Verificando a presença do valor "vazio"
tabela = prop.table(table(pokemon$type2))*100
tabela_df <- as.data.frame(tabela)
# Exibindo como tabela formatada
kable(tabela_df, col.names = c("Tipo2", "Proporção"), digits = 3)
#| include: false
# Criando uma função para substituição do valor "vazio"
subst_vazios = function(col){
ifelse(col == "", "Nenhum", col)
}
# Aplicando a função de substituição
pokemon = apply(pokemon, 2, subst_vazios)
pokemon = as.data.frame(pokemon)
# Verificando a presença do valor "vazio" novamente
tabela = prop.table(table(pokemon$type2))*100
tabela_df <- as.data.frame(tabela)
# Exibindo como tabela formatada
kable(tabela_df, col.names = c("Tipo2", "Proporção"), digits = 3)
#| echo: false
#| message: false
#| warning: false
attach(pokemon)
# Alterando o tipo das colunas
# Fator
pokemon$generation = as.factor(generation)
pokemon$special_group = as.factor(special_group)
pokemon$egg_cycles = as.factor(egg_cycles)
pokemon$egg_group1 = as.factor(egg_group1)
pokemon$egg_group2 = as.factor(egg_group2)
pokemon$growth_rate = as.factor(growth_rate)
# Inteiros e Reais
pokemon$height = as.double(height)
pokemon$weight = as.double(weight)
pokemon$hp = as.integer(hp)
pokemon$attack = as.integer(attack)
pokemon$defense = as.integer(defense)
pokemon$speed = as.integer(speed)
pokemon$sp_atk = as.integer(sp_atk)
pokemon$sp_def = as.integer(sp_def)
pokemon$total = as.integer(total)
pokemon$base_exp = as.integer(base_exp)
pokemon$catch_rate = as.integer(catch_rate)
pokemon$base_friendship = as.integer(base_friendship)
str(pokemon)
#| echo: false
# Tabela resumo das variáveis contínuas
pokemon |>
select(where(is.numeric)) |>  # Seleciona apenas as variáveis numéricas
tbl_summary(
statistic = list(all_continuous()  ~ "{mean} ({sd})"),
digits = list(all_continuous() ~ c(1, 1))
) |>
modify_header(label = "**Variável**") |>
modify_caption("Estatística descritiva para variáveis contínuas") |>
bold_labels()
#| echo: false
#| warning: false
# Função para aplicar o ks.test a cada coluna com a distribuição normal
ks_test_results = pokemon %>%
select(where(is.numeric)) %>%  # Seleciona apenas variáveis numéricas
summarise(across(everything(),
~ ks.test(.x, "pnorm", mean = mean(.x), sd = sd(.x))$p.value))
# Criar uma tabela com os resultados do teste de Kolmogorov-Smirnov
resultados_ks <- data.frame(
Variável = c("Height", "Weight", "HP", "Attack", "Defense",
"Special Attack", "Special Defense", "Speed", "Total",
"Catch Rate", "Base Friendship", "Base Exp"),
`Valor de p` = c(7.85e-37, 7.07e-75, 3.60e-08, 0.0003139477, 2.37e-07,
1.16e-09, 1.95e-05, 0.0001688998, 1.88e-08, 1.11e-38,
3.97e-151, 3.54e-19),
Interpretação = rep("Não segue uma distribuição normal (p < 0.05)", 12)
)
# Gerar a tabela com kable
kable(resultados_ks, caption = "Resultados do Teste de Kolmogorov-Smirnov para Normalidade")
#| echo: false
# Histograma da variável 'Total'
ggplot(pokemon, aes(x = total)) +
geom_histogram(bins = 30, fill = "orange", color = "black") +
labs(title = "Distribuição do Total de Atributos", x = "Total de Atributos", y = "Frequência") +
theme_minimal()
#| echo: false
# Tipo1
tabela_tipo1 = pokemon |>
group_by(type1) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
kable(tabela_tipo1, col.names = c("Tipo Primário", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
#| echo: false
# Tipo2
tabela_tipo2 = pokemon |>
group_by(type2) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
kable(tabela_tipo2, col.names = c("Tipo Secundário", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
#| echo: false
# Distribuição do tipo1
pokemon %>%
count(type1) %>%
ggplot(aes(x = reorder(type1, n), y = n, fill = type1)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Distribuição do Tipo1 de Pokémon", x = "Tipo1", y = "Frequência") +
theme_minimal()
#| echo: false
# Distribuição do tipo2
pokemon %>%
count(type2) %>%
ggplot(aes(x = reorder(type2, n), y = n, fill = type2)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Distribuição do Tipo2 de Pokémon", x = "Tipo2", y = "Frequência") +
theme_minimal()
str(pokemon)
#| echo: false
# Tipo2
tabela_tipo2 = pokemon |>
group_by(special_group) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
#| echo: false
# Tipo1
tabela_tipo1 = pokemon |>
group_by(generation) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
kable(tabela_tipo1, col.names = c("Geração", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
#| echo: false
# Tipo2
tabela_tipo2 = pokemon |>
group_by(special_group) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
kable(tabela_tipo2, col.names = c("Grupos Especiais", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
#| echo: false
# Verificar melhor grupo especial baseado no total
ggplot(pokemon, aes(x = special_group, y = total, color=special_group)) +
geom_violin() + stat_summary(fun.y=mean, geom="point", shape=23, size=5, fill = "black") +
geom_jitter(shape=16, position=position_jitter(0.2))
#| echo: false
# Distribuição da taxa de crescimento
ggplot(data = pokemon) +
geom_bar(aes(x = growth_rate, fill = "darkgreen")) + scale_y_log10() +
labs(title = "Quantidade de Pokémon por Taxa de Crescimento", x = "Growth Rate", y = "Frequência") +
theme_minimal()
#| echo: false
# Tipo2
tabela_tipo2 = pokemon |>
group_by(growth_rate) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
#| echo: false
# Tipo2
tabela_tipo2 = pokemon |>
group_by(growth_rate) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
kable(tabela_tipo2, col.names = c("Taxa de Crescimento", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
str(pokemon)
kruskal.test(pokemon$total ~ pokemon$special_group)
library(car)
install.packages("car")
library(car)
levene.test(pokemon$total ~ pokemon$special_group)
leveneTest(pokemon$total ~ pokemon$special_group)
kruskal.test(pokemon$total ~ pokemon$special_group)
leveneTest(pokemon$total ~ pokemon$special_group)
help("kruskal.test")
kruskal.test(pokemon$total ~ pokemon$generation)
leveneTest(pokemon$total ~ pokemon$generation)
#| echo: false
# Distribuição das gerações
ggplot(data = pokemon) +
geom_bar(aes(x = generation, fill = "steelblue")) +
labs(title = "Quantidade de Pokémon por Geração", x = "Geração", y = "Frequência") +
theme_minimal()
#| echo: false
# Verificar melhor geração baseado no total
ggplot(pokemon, aes(x = generation, y = total, color=generation)) +
geom_violin() + stat_summary(fun.y=mean, geom="point", shape=23, size=5, fill = "black") +
geom_jitter(shape=16, position=position_jitter(0.2))
leveneTest(pokemon$total ~ pokemon$generation)
leveneTest(pokemon$total ~ pokemon$growth_rate)
#| echo: false
# Verificar melhor taxa de crescimento baseado no total
ggplot(pokemon, aes(x = growth_rate, y = total, color=growth_rate)) +
geom_violin() + stat_summary(fun.y=mean, geom="point", shape=23, size=4, fill = "black") +
geom_jitter(shape=16, position=position_jitter(0.2))
# Exemplos de pokemon que tem uma taxa de crescimento lenta e possuem total baixo
#| echo: false
# Tipo1
tabela_tipo1 = pokemon |>
group_by(generation) |>
summarise(peso_media = mean(weight, na.rm = T),
altura_media = mean(height, na.rm = T),
count = n()) |>
arrange(desc(peso_media), desc(altura_media))
kable(tabela_tipo1, col.names = c("Geração", "Peso Médio", "Altura Média", "Quantidade"), digits = 2)
leveneTest(pokemon$height ~ pokemon$generation)
leveneTest(pokemon$width ~ pokemon$generation)
leveneTest(pokemon$weigth ~ pokemon$generation)
leveneTest(pokemon$weight ~ pokemon$generation)
leveneTest(pokemon$height ~ pokemon$special_group)
leveneTest(pokemon$weight ~ pokemon$special_group)
leveneTest(pokemon$height ~ pokemon$growth_rate)
leveneTest(pokemon$weight ~ pokemon$growth_rate)
leveneTest(pokemon$height ~ pokemon$generation)
leveneTest(pokemon$weight ~ pokemon$generation)
# Supondo que o código já tenha sido executado:
height_test <- leveneTest(pokemon$height ~ pokemon$generation)
weight_test <- leveneTest(pokemon$weight ~ pokemon$generation)
# Criando uma tabela com os resultados
resultados <- data.frame(
"Variável" = c("Height", "Weight"),
"Valor de p" = c(height_test$`Pr(>F)`[1], weight_test$`Pr(>F)`[1]),
"Conclusão" = c(
ifelse(height_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa"),
ifelse(weight_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa")
)
)
# Exibindo a tabela
print(resultados)
# Supondo que o código já tenha sido executado:
height_test <- leveneTest(pokemon$height ~ pokemon$generation)
weight_test <- leveneTest(pokemon$weight ~ pokemon$generation)
# Criando uma tabela com os resultados
resultados <- data.frame(
"Variável" = c("Height", "Weight"),
"Valor de p" = c(height_test$`Pr(>F)`[1], weight_test$`Pr(>F)`[1]),
"Conclusão" = c(
ifelse(height_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa"),
ifelse(weight_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa")
)
)
# Exibindo a tabela
print("HOMOGENEIDADE DA GERAÇÃO:")
print(resultados)
# Supondo que o código já tenha sido executado:
height_test <- leveneTest(pokemon$height ~ pokemon$generation)
weight_test <- leveneTest(pokemon$weight ~ pokemon$generation)
# Criando uma tabela com os resultados
resultados <- data.frame(
"Variável" = c("Height", "Weight"),
"Valor de p" = c(height_test$`Pr(>F)`[1], weight_test$`Pr(>F)`[1]),
"Conclusão" = c(
ifelse(height_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa"),
ifelse(weight_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa")
)
)
# Exibindo a tabela
print(resultados)
# Supondo que o código já tenha sido executado:
height_test <- leveneTest(pokemon$height ~ pokemon$special_group)
weight_test <- leveneTest(pokemon$weight ~ pokemon$special_group)
# Criando uma tabela com os resultados
resultados <- data.frame(
"Variável" = c("Height", "Weight"),
"Valor de p" = c(height_test$`Pr(>F)`[1], weight_test$`Pr(>F)`[1]),
"Conclusão" = c(
ifelse(height_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa"),
ifelse(weight_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa")
)
)
# Exibindo a tabela
print(resultados)
# Supondo que o código já tenha sido executado:
height_test <- leveneTest(pokemon$height ~ pokemon$growth_rate)
weight_test <- leveneTest(pokemon$weight ~ pokemon$growth_rate)
# Criando uma tabela com os resultados
resultados <- data.frame(
"Variável" = c("Height", "Weight"),
"Valor de p" = c(height_test$`Pr(>F)`[1], weight_test$`Pr(>F)`[1]),
"Conclusão" = c(
ifelse(height_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa"),
ifelse(weight_test$`Pr(>F)`[1] < 0.05, "Diferença significativa", "Diferença não significativa")
)
)
# Exibindo a tabela
print(resultados)
#| echo: false
# Distribuição do tipo1
pokemon %>%
count(type1) %>%
ggplot(aes(x = reorder(type1, n), y = n, fill = type1)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Distribuição do Tipo Primário de Pokémon", x = "Tipo1", y = "Frequência") +
theme_minimal()
prop.table(table(pokemon$type1))*100
pokemon %>%
count(type2) %>%
ggplot(aes(x = reorder(type2, n), y = n, fill = type2)) +
geom_bar(stat = "identity") + scale_y_log10() +
coord_flip() +
labs(title = "Distribuição do Tipo Secundário de Pokémon", x = "Tipo2", y = "Frequência") +
theme_minimal()
pokemon %>%
count(type1) %>%
ggplot(aes(x = reorder(type1, n), y = n, fill = type1)) +
geom_bar(stat = "identity") + scale_y_log10() +
coord_flip() +
labs(title = "Distribuição do Tipo Primário de Pokémon", x = "Tipo1", y = "Frequência") +
theme_minimal()
prop.table(table(pokemon$type2))*100
#| echo: false
leveneTest(pokemon$total ~ pokemon$special_group)
